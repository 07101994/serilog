// Copyright 2013-2015 Serilog Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.IO;

namespace Serilog.Debugging
{
    /// <summary>
    /// A simple source of information generated by Serilog itself,
    /// for example when exceptions are thrown and caught internally.
    /// </summary>
    public static class SelfLog
    {
        static readonly Action<string> _output;

        /// <summary>
        /// The output mechanism for self-log events.
        /// </summary>
        /// <example>
        /// SelfLog.Out = Console.Error;
        /// </example>
        // ReSharper disable once MemberCanBePrivate.Global, UnusedAutoPropertyAccessor.Global
        [Obsolete("Use SetOutput() instead")]
        public static TextWriter Out
        {
            set
            {
                if (value == null)
                {
                    SetOutput(null);
                }
                else
                {
                    SetOutput(m =>
                    {
                        value.WriteLine(DateTime.UtcNow.ToString("o") + " " + m);
                        value.Flush();
                    });
                }
            }
        }

        public static void SetOutput(Action<string> output)
        {
        }

        /// <summary>
        /// Write a message to the self-log.
        /// </summary>
        /// <param name="format">Standard .NET format string containing the message.</param>
        /// <param name="arg0">First argument, if supplied.</param>
        /// <param name="arg1">Second argument, if supplied.</param>
        /// <param name="arg2">Third argument, if supplied.</param>
        public static void WriteLine(string format, object arg0 = null, object arg1 = null, object arg2 = null)
        {
            var o = _output;
            if (o != null)
            {
                o(string.Format(format, arg0, arg1, arg2));
            }
        }
    }
}
